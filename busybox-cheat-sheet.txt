--- Tip  --- 
--> When do make for busybox pleasuse sudo, else there will be problems ..


https://gist.github.com/chrisdone/02e165a0004be33734ac2334f215380e

## Common

````
export OPT=/opt     < export OPT=`pwd` >
export BUILDS=/some/where/mini_linux <  export BUILDS=$OPT/mini_linux >
mkdir -p $BUILDS
````

## Linux kernel

````
export LINUX=$OPT/linux
export LINUX_BUILD=$BUILDS/linux
mkdir -p $LINUX_BUILD
cd $LINUX
make O=$LINUX_BUILD allnoconfig
cd $LINUX_BUILD
make menuconfig
````

Configure the kernel according the following:

````
64-bit kernel ---> yes
General setup ---> Initial RAM filesystem and RAM disk (initramfs/initrd) support ---> yes
General setup ---> Configure standard kernel features ---> Enable support for printk ---> yes
Executable file formats / Emulations ---> Kernel support for ELF binaries ---> yes
Executable file formats / Emulations ---> Kernel support for scripts starting with #! ---> yes
Device Drivers ---> Generic Driver Options ---> Maintain a devtmpfs filesystem to mount at /dev ---> yes
Device Drivers ---> Generic Driver Options ---> Automount devtmpfs at /dev, after the kernel mounted the rootfs ---> yes
Device Drivers ---> Character devices ---> Enable TTY ---> yes
Device Drivers ---> Character devices ---> Serial drivers ---> 8250/16550 and compatible serial support ---> yes
Device Drivers ---> Character devices ---> Serial drivers ---> Console on 8250/16550 and compatible serial port ---> yes
File systems ---> Pseudo filesystems ---> /proc file system support ---> yes
File systems ---> Pseudo filesystems ---> sysfs file system support ---> yes
````
[ You may need to copy the .confg from $LINUX_BUILD to $LINUX --> and can do make menuconfig @ $LINUX and make, in order to have the device driver programming]
Build the kernel:

````
time make -j8
````

````
...
Kernel: arch/x86/boot/bzImage is ready  (#1)

real    2m37.247s
user    1m58.541s
sys     0m25.542s
````

## Busybox

````
export BUSYBOX=$OPT/busybox
export BUSYBOX_BUILD=$BUILDS/busybox
mkdir -p $BUSYBOX_BUILD
cd $BUSYBOX
make O=$BUSYBOX_BUILD defconfig
cd $BUSYBOX_BUILD
make menuconfig
````

Configure Busybox according the following:

````
Busybox Settings ---> Build Options ---> Build BusyBox as a static binary (no shared libs) ---> yes
````

Build Busybox:

````
time make -j8
````

````
...
Final link with: m

real    0m20.356s
user    0m46.959s
sys     0m10.628s
````

Install Busybox:

````
make install
````

Create an initramfs:

````
export INITRAMFS_BUILD=$BUILDS/initramfs
mkdir -p $INITRAMFS_BUILD
cd $INITRAMFS_BUILD
mkdir -p bin sbin etc proc sys usr/bin usr/sbin
cp -a $BUSYBOX_BUILD/_install/* .
````

Add a `$INITRAMFS_BUILD/init` script to the initramfs with the following content:

````
#!/bin/sh

mount -t proc none /proc
mount -t sysfs none /sys

cat <<!


Boot took $(cut -d' ' -f1 /proc/uptime) seconds

        _       _     __ _                  
  /\/\ (_)_ __ (_)   / /(_)_ __  _   ___  __
 /    \| | '_ \| |  / / | | '_ \| | | \ \/ /
/ /\/\ \ | | | | | / /__| | | | | |_| |>  < 
\/    \/_|_| |_|_| \____/_|_| |_|\__,_/_/\_\ 


Welcome to mini_linux


!
exec /bin/sh
````

Create the initramfs archive:

````
chmod +x init
find . -print0 | cpio --null -ov --format=newc \
  | gzip -9 > $BUILDS/initramfs.cpio.gz
````

## Run and see (`<CTRL>a x` to quit)

````
qemu-system-x86_64 -kernel $LINUX_BUILD/arch/x86_64/boot/bzImage \
  -initrd $BUILDS/initramfs.cpio.gz -nographic \
  -append "console=ttyS0"
````

----------------to run you custome codes ---------------------
$ mkdir /home/aj/Desktop/small_setup/l4bw/
$ cd /home/aj/Desktop/small_setup/l4bw/hello 
$ gedit hello.c 
-----
#include <stdio.h>

int main(int argc, char **argv) {
	printf("mini_linux says: Hello world!\n");
	return 0;
}
-----
$ gcc -g -Wall -g -o hello.out  hello.c -static
$ cd ..
$ cd initramfs/etc
$ cp -rf ../../hello .
$ find . -print0 | cpio --null -ov --format=newc \
  | gzip -9 > $BUILDS/initramfs.cpio.gz
  ---> check your etc/hello is loaded or not
$ qemu-system-x86_64 -kernel $LINUX_BUILD/arch/x86_64/boot/bzImage   -initrd $BUILDS/initramfs.cpio.gz -nographic   -append "console=ttyS0"
inside minibox --
/ # ls
bin      etc      linuxrc  root     sys
dev      init     proc     sbin     usr
/ # cd etc
/etc # ls
hello
/etc # cd hello 
/etc/hello # ls
hello.c    hello.out
/etc/hello # ./hello.out
mini_linux says: Hello world! < CTRL+a x>
/etc/hello # QEMU: Terminated

--------------- To RUN a Device Driver Code ------
[ You have to copy the .confg from $LINUX_BUILD to $LINUX --> and can do make menuconfig @ $LINUX and make, in order to have the device driver programming]
$ cd $LINUX [ you should be in the kernel folder, which is downloaded from kernel.org ]
$ cp $LINUX_BUILD/.config .
$ tk diff .config $LINUX_BUILD/.config  [ you shoudl not see any difference]
$ make menuconfig [ do do any change in config as its align with $LINUX_BUILD/.config ]
$ make [will compile your kernel]
$ cd ~/Desktop/small_setup/l4bw_org
$ mkdir DD [ for Device Driver]
$ cd DD
$ mkdir hello_world [ simple program to start with] 
$ cd hello_world
$ gedit hello.c
-----------------------------------------------------------
#include <linux/module.h>     /* Needed by all modules */
#include <linux/kernel.h>     /* Needed for KERN_INFO */
#include <linux/init.h>       /* Needed for the macros */
  
///< The license type -- this affects runtime behavior
MODULE_LICENSE("GPL");
  
///< The author -- visible when you use modinfo
MODULE_AUTHOR("Akshat Sinha");
  
///< The description -- see modinfo
MODULE_DESCRIPTION("A simple Hello world LKM!");
  
///< The version of the module
MODULE_VERSION("0.1");
  
static int __init hello_start(void)
{
    printk(KERN_INFO "Loading hello module...\n");
    printk(KERN_INFO "Hello world\n");
    return 0;
}
  
static void __exit hello_end(void)
{
    printk(KERN_INFO "Goodbye Mr.\n");
}
  
module_init(hello_start);
module_exit(hello_end);
------------------------------------------------------------------
$ gedit Makefile 
------------------------------------------------------------------
obj-m = hello.o
all:
	make -C ~/Desktop/small_setup/l4bw_org/linux-4.10.6 M=$(PWD) modules
clean:
	make -C ~/Desktop/small_setup/l4bw_org/linux-4.10.6 M=$(PWD) clean
------------------------------------------------------------------
$ make all [ will make hello.ko --> check its using the same kernal which is used for $LINUX_BUILD]
$ cd ~/Desktop/small_setup/l4bw_org/mini_linux/initramfs [where you will start the qemu mini-box]
$ cd etc
$ cp -rf ~/Desktop/small_setup/l4bw_org/DD/hello_world .
$ cd ..
$ pwd /home/aj/Desktop/small_setup/l4bw_org/mini_linux/initramfs
$ find . -print0 | cpio --null -ov --format=newc \
  | gzip -9 > $BUILDS/initramfs.cpio.gz
  ---> check your etc/hello_world is loaded or not
$ qemu-system-x86_64 -kernel $LINUX_BUILD/arch/x86_64/boot/bzImage   -initrd $BUILDS/initramfs.cpio.gz -nographic   -append "console=ttyS0"
Boot took 0.41 seconds

        _       _     __ _                  
  /\/\ (_)_ __ (_)   / /(_)_ __  _   ___  __
 /    \| | '_ \| |  / / | | '_ \| | | \ \/ /
/ /\/\ \ | | | | | / /__| | | | | |_| |>  < 
\/    \/_|_| |_|_| \____/_|_| |_|\__,_/_/\_\ 


Welcome to mini_linux


/bin/sh: can't access tty; job control turned off
random: fast init done
/ # input: ImExPS/2 Generic Explorer Mouse as /devices/platform/i8042/serio1/input/input2
clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x33cb736199d, max_idle_ns: 440795376052 ns
clocksource: Switched to clocksource tsc
clocksource: timekeeping watchdog on CPU0: Marking clocksource 'tsc' as unstable because the skew is too large:
clocksource:                       'refined-jiffies' wd_now: fffede48 wd_last: fffeddc8 mask: ffffffff
clocksource:                       'tsc' cs_now: 3fab4c0d4 cs_last: 31c0ab140 mask: ffffffffffffffff
clocksource: Switched to clocksource refined-jiffies

/ # ls
bin      etc      linuxrc  root     sys
dev      init     proc     sbin     usr
/ # cd etc
/etc # ls
hello        hello_world
/etc # cd hello_world/
/etc/hello_world # dmesg -c
/etc/hello_world # ls
Makefile        hello.c         hello.mod.c     hello.o
Module.symvers  hello.ko        hello.mod.o     modules.order
/etc/hello_world # insmod hello.ko
hello: loading out-of-tree module taints kernel.
Loading hello module...
Hello world
/etc/hello_world # rmmod hello
rmmod: remove 'hello': Function not implemented
/etc/hello_world # rmmod hello.ko
rmmod: remove 'hello': Function not implemented
/etc/hello_world # cd ..
/etc # cd ..
/ # find . -name insmod 
./sbin/insmod
/ # find . -name rmmod
./sbin/rmmod
/ # lsmdo
/bin/sh: lsmdo: not found
/ # lsmod
hello 704 - - Live 0xffffffffa0000000 (O)
[CNTRL+A x]
/ # QEMU: Terminated
----------------------------------------++++++++++++++++++--------------------------------------------------------------


Note: for better performance, add the `-enable-kvm` option if your host has KVM enabled:
````
qemu-system-x86_64 -kernel $LINUX_BUILD/arch/x86_64/boot/bzImage \
  -initrd $BUILDS/initramfs.cpio.gz -nographic \
  -append "console=ttyS0" -enable-kvm
````

````
...


Boot took 0.45 seconds

        _       _     __ _                  
  /\/\ (_)_ __ (_)   / /(_)_ __  _   ___  __
 /    \| | '_ \| |  / / | | '_ \| | | \ \/ /
/ /\/\ \ | | | | | / /__| | | | | |_| |>  < 
\/    \/_|_| |_|_| \____/_|_| |_|\__,_/_/\_\ 


Welcome to mini_linux


/ # ls /
bin      etc      linuxrc  root     sys
dev      init     proc     sbin     usr
/ # QEMU: Terminated
````

## Buildroot

We assume that a toolchain is available in `/opt/toolchains/x86_64-unknown-linux-gnu` with prefix `x86_64-unknown-linux-gnu`, gcc version 5.x, kernel headers series 4.3.x, glibc C library and C++ support. These are reasonable defaults if you are using a toolchain generated by crosstool-NG. Adapt to your own situation. Notes:
* You cannot use the native toolchain of your host computer (see Buildroot documentation to understand why).
* If you do not have a toolchain already, you can build one using crosstool-NG (or Buildroot itself) and reuse it for other projects.
* crosstool-NG is the recommended tool to build your own toolchain but avoid using uClibc (no IPV6 support), prefer uClibc-ng or glibc.
* You can also use the built-in toolchain of Buildroot but be aware that it will take way longer than using an existing toolchain. Be also aware that in many cases you will have to re-build the toolchain after modifying the Buildroot configuration.
* No yet convinced? Please use crosstool-NG, build and use your own toolchain.

````
export BUILDROOT=$OPT/buildroot
export BUILDROOT_BUILD=$BUILDS/buildroot
mkdir -p $BUILDROOT_BUILD
cd $BUILDROOT_BUILD
touch Config.in external.mk
echo 'name: mini_linux' > external.desc
echo 'desc: minimal linux system with buildroot' >> external.desc
mkdir configs overlay
cd $BUILDROOT
make O=$BUILDROOT_BUILD BR2_EXTERNAL=$BUILDROOT_BUILD qemu_x86_64_defconfig
cd $BUILDROOT_BUILD
make menuconfig
````

Configure Buildroot according the following:

````
Build options ---> Location to save buildroot config ---> $(BR2_EXTERNAL)/configs/mini_linux_defconfig
Build options ---> Download dir ---> /some/where/buildroot_dl
Build options ---> Number of jobs to run simultaneously (0 for auto) ---> 8
Build options ---> Enable compiler cache ---> yes
Build options ---> Compiler cache location ---> /some/where/buildroot_ccache
Toolchain ---> Toolchain type ---> External toolchain
Toolchain ---> Toolchain ---> Custom toolchain
Toolchain ---> Toolchain origin ---> Pre-installed toolchain
Toolchain ---> Toolchain path ---> /opt/toolchains/x86_64-unknown-linux-gnu
Toolchain ---> Toolchain prefix ---> x86_64-unknown-linux-gnu
Toolchain ---> External toolchain gcc version ---> 5.x
Toolchain ---> External toolchain kernel headers series ---> 4.3.x
Toolchain ---> External toolchain C library ---> glibc/eglibc
Toolchain ---> Toolchain has C++ support? ---> yes
System configuration ---> System hostname ---> mini_linux
System configuration ---> System banner ---> Welcome to mini_linux
System configuration ---> Run a getty (login prompt) after boot ---> TTY port ---> ttyS0
System configuration ---> Network interface to configure through DHCP --->
System configuration ---> Root filesystem overlay directories ---> $(BR2_EXTERNAL)/overlay
Kernel ---> Linux Kernel ---> no
Filesystem images ---> cpio the root filesystem (for use as an initial RAM filesystem) ---> yes
Filesystem images ---> Compression method ---> gzip
````

Save the configuration and build:

````
make savedefconfig
````

Add a `$BUILDROOT_BUILD/overlay/init` script to the overlay with the following content:

````
#!/bin/sh
/bin/mount -t devtmpfs devtmpfs /dev
/bin/mount -t proc none /proc
/bin/mount -t sysfs none /sys
exec 0</dev/console
exec 1>/dev/console
exec 2>/dev/console
cat <<!


Boot took $(cut -d' ' -f1 /proc/uptime) seconds

        _       _     __ _                  
  /\/\ (_)_ __ (_)   / /(_)_ __  _   ___  __
 /    \| | '_ \| |  / / | | '_ \| | | \ \/ /
/ /\/\ \ | | | | | / /__| | | | | |_| |>  < 
\/    \/_|_| |_|_| \____/_|_| |_|\__,_/_/\_\ 


Welcome to mini_linux


!
exec /bin/sh
````

Build the root filesystem:

````
chmod +x overlay/init
time make
````

````
...
real    1m52.905s
user    0m50.682s
sys     0m36.928s
````

## Run and see (`<CTRL>a x` to quit)

````
qemu-system-x86_64 -kernel $LINUX_BUILD/arch/x86_64/boot/bzImage \
  -initrd $BUILDROOT_BUILD/images/rootfs.cpio.gz -nographic \
  -append "console=ttyS0"
````

Note: for better performance, add the `-enable-kvm` option if your host has KVM enabled.

````
...


Boot took 0.57 seconds

        _       _     __ _                  
  /\/\ (_)_ __ (_)   / /(_)_ __  _   ___  __
 /    \| | '_ \| |  / / | | '_ \| | | \ \/ /
/ /\/\ \ | | | | | / /__| | | | | |_| |>  < 
\/    \/_|_| |_|_| \____/_|_| |_|\__,_/_/\_\ 


Welcome to mini_linux


/ # ls /
bin      init     linuxrc  opt      run      tmp
dev      lib      media    proc     sbin     usr
etc      lib64    mnt      root     sys      var
/ # QEMU: Terminated
````

## Add and run a custom user application

Create a new directory for the custom user applications:

````
export APPS=$BUILDS/apps
mkdir -p $APPS
cd $APPS
````

Add an application source file `$APPS/hello_world.c` with the following content:

````
#include <stdio.h>

int main(int argc, char **argv) {
	printf("mini_linux says: Hello world!\n");
	return 0;
}
````

Add a `$APPS/Makefile` with the following content (replace the `CROSS_COMPILE` definition with whatever is appropriate in your specific case):

````
CROSS_COMPILE	:= /opt/toolchains/x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-
CC		:= $(CROSS_COMPILE)gcc

hello_world: hello_world.o
	$(CC) -o $@ $<

hello_world.o: hello_world.c
	$(CC) -c -o $@ $<

clean:
	rm -f hello_world hello_world.o
````

Compile the application, copy it in the Buildroot overlay directory and re-build the root filesystem:

````
make
...
cp hello_world $BUILDROOT_BUILD/overlay
...
cd $BUILDROOT_BUILD
make
````

## Run and see (`<CTRL>a x` to quit)

````
qemu-system-x86_64 -kernel $LINUX_BUILD/arch/x86_64/boot/bzImage \
  -initrd $BUILDROOT_BUILD/images/rootfs.cpio.gz -nographic \
  -append "console=ttyS0"
````

Note: for better performance, add the `-enable-kvm` option if your host has KVM enabled.

````
...


Boot took 0.57 seconds

        _       _     __ _                  
  /\/\ (_)_ __ (_)   / /(_)_ __  _   ___  __
 /    \| | '_ \| |  / / | | '_ \| | | \ \/ /
/ /\/\ \ | | | | | / /__| | | | | |_| |>  < 
\/    \/_|_| |_|_| \____/_|_| |_|\__,_/_/\_\ 


Welcome to mini_linux


/ # ls
bin          init         media        root         tmp
dev          lib          mnt          run          usr
etc          lib64        opt          sbin         var
hello_world  linuxrc      proc         sys
/ # ./hello_world
mini_linux says: Hello world!
/ # QEMU: Terminated
````

## Add loadable module support to the Linux kernel

````
cd $LINUX_BUILD
make menuconfig
````

Change the kernel configuration according the following:

````
Enable loadable module support ---> yes
````

Re-build the kernel and its modules (none, in our case) and install the modules in the Buildroot overlay directory:

````
make -j8
make -j8 modules
make modules_install INSTALL_MOD_PATH=$BUILDROOT_BUILD/overlay
````

## Add a custom user module

Create a new directory for the custom user modules:

````
export MODULES=$BUILDS/modules
mkdir -p $MODULES
cd $MODULES
````

Add a module source file `$MODULES/hello_world.c` with the following content:

````
/* hello_world.c */
#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>

static int __init first_init(void)
{
  pr_info("mini_linux module says: Hello world!\n");
  return 0;
}

static void __exit first_exit(void)
{
  pr_info("Bye\n");
}

module_init(first_init);
module_exit(first_exit);

MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("My first module");
MODULE_AUTHOR("The Doctor");
````

Add a `$MODULES/Makefile` with the following content:

````
ifneq ($(KERNELRELEASE),)
# kbuild part of makefile
obj-m := hello_world.o

else
# normal makefile
KDIR ?= $(LINUX_BUILD)

default:
	$(MAKE) -C $(KDIR) M=$$PWD

modules_install:
	$(MAKE) -C $(KDIR) M=$$PWD $@

clean:
	rm -rf *.o .*.cmd *.ko hello_world.mod.c modules.order Module.symvers .tmp_versions
endif
````

Compile the module, install it in the Buildroot overlay directory and re-build the root filesystem:

````
make
...
make modules_install INSTALL_MOD_PATH=$BUILDROOT_BUILD/overlay
...
cd $BUILDROOT_BUILD
make
````

## Run and see (`<CTRL>a x` to quit)

````
qemu-system-x86_64 -kernel $LINUX_BUILD/arch/x86_64/boot/bzImage \
  -initrd $BUILDROOT_BUILD/images/rootfs.cpio.gz -nographic \
  -append "console=ttyS0"
````

Note: for better performance, add the `-enable-kvm` option if your host has KVM enabled.

````
...


Boot took 0.57 seconds

        _       _     __ _                  
  /\/\ (_)_ __ (_)   / /(_)_ __  _   ___  __
 /    \| | '_ \| |  / / | | '_ \| | | \ \/ /
/ /\/\ \ | | | | | / /__| | | | | |_| |>  < 
\/    \/_|_| |_|_| \____/_|_| |_|\__,_/_/\_\ 


Welcome to mini_linux


/ # ls lib/modules/4.8.0\+/extra
hello_world.ko
/ # lsmod
Module                  Size  Used by    Not tainted
/ # insmod lib/modules/4.8.0\+/extra/hello_world.ko
hello_world: loading out-of-tree module taints kernel.
mini_linux module says: Hello world!
/ # lsmod
Module                  Size  Used by    Tainted: G  
hello_world              704  -
/ # QEMU: Terminated
````


https://github.com/reubenhwk/tiny-qemu-image

https://github.com/cirosantilli/linux-kernel-module-cheat

--> working setup -->> copy in the blue drive also ..

cd < to some location , where you want to have your BB build>
sudo cp -rf linux_4x_BusyBox  linux_4x_BusyBox_<fresh one ... >
cd /home/ajay/linux_4x_BusyBox_working
export OPT=/home/ajay/linux_4x_BusyBox_working  OR still better "export OPT=`pwd`
export BUILDS=$OPT/mini_linux
export LINUX=$OPT/linux
export LINUX_BUILD=$BUILDS/linux
export BUSYBOX=$OPT/busybox
export BUSYBOX_BUILD=$BUILDS/busybox
export INITRAMFS_BUILD=$BUILDS/initramfs
cd $INITRAMFS_BUILD
rm -rf *
mkdir -p bin sbin etc proc sys usr/bin usr/sbin
cp -a $BUSYBOX_BUILD/_install/* .
gedit init
--save below ---
#!/bin/sh

mount -t proc none /proc
mount -t sysfs none /sys

cat <<!


Boot took $(cut -d' ' -f1 /proc/uptime) seconds

        _       _     __ _                  
  /\/\ (_)_ __ (_)   / /(_)_ __  _   ___  __
 /    \| | '_ \| |  / / | | '_ \| | | \ \/ /
/ /\/\ \ | | | | | / /__| | | | | |_| |>  < 
\/    \/_|_| |_|_| \____/_|_| |_|\__,_/_/\_\ 


Welcome to mini_linux

!
exec /bin/sh

---------------


chmod +x init
find . -print0 | cpio --null -ov --format=newc \
  | gzip -9 > $BUILDS/initramfs.cpio.gz

qemu-system-x86_64 -kernel $LINUX_BUILD/arch/x86_64/boot/bzImage \
  -initrd $BUILDS/initramfs.cpio.gz -nographic \
  -append "console=ttyS0"

cntrl+a x < to terminate the session>

foo.tgz --> in this repo is compressed for the above working !!

--- zip with multiple symlinks --- 
zip --symlinks -r foo.zip foo/



